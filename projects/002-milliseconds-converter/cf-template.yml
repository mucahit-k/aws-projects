AWSTemplateFormatVersion: 2010-09-09
Description: 'Milliseconds Converter Web application (Python Flask) deployed on AWS Application Load Balancer with Auto Scaling Group'
Parameters:
  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small

  LinuxAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  AutoScalingMinSize:
    Type: String
    Description: Minimum instance number for Auto Scaling Group
  
  AutoScalingMaxSize:
    Type: String
    Description: Maximum instance number for Auto Scaling Group

  AutoScalingDesiredCapacity:
    Type: String
    Description: Desired instance number for Auto Scaling Group

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP
      VpcId: vpc-0a8eb270
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTP
      VpcId: vpc-0a8eb270
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MillisecondsLoadBalancer
      Subnets: 
        - subnet-b25fbfd4
        - subnet-608d3e2d
        - subnet-7edc3021
        - subnet-ccd5e2f2
        - subnet-83ad088d
        - subnet-5032dc71
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
  
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: vpc-0a8eb270

  AutoScalingServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebServerConfig
      DesiredCapacity: !Ref AutoScalingDesiredCapacity
      MinSize: !Ref AutoScalingMinSize
      MaxSize: !Ref AutoScalingMaxSize
      TargetGroupARNs: 
        - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier:
        - subnet-b25fbfd4
        - subnet-608d3e2d
        - subnet-7edc3021
        - subnet-ccd5e2f2
        - subnet-83ad088d
        - subnet-5032dc71
      
  WebServerConfig:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref LinuxAmiId
      InstanceType: !Ref EC2InstanceType
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            yum install python3 -y
            cd ~
            wget "https://raw.githubusercontent.com/mucahit-k/aws-projects/master/projects/002-milliseconds-converter/app.py"
            mkdir templates && cd templates
            wget "https://raw.githubusercontent.com/mucahit-k/aws-projects/master/projects/002-milliseconds-converter/templates/index.html"
            wget "https://raw.githubusercontent.com/mucahit-k/aws-projects/master/projects/002-milliseconds-converter/templates/result.html"
            pip3 install flask
            python3 ~/app.py
      
Outputs:
  WebsiteURL:
    Value: !Sub http://${ElasticLoadBalancer.DNSName}
    Description: Application URL